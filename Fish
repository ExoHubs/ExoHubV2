local Adv_Fish = game:GetService("Workspace").__THINGS.Instances.AdvancedFishing.Teleports.Enter
local FirstPosition = Adv_Fish.Position

local pl = game.Players.LocalPlayer
local chr = game.Players.LocalPlayer.Character
local UI = pl.PlayerGui["_INSTANCES"].FishingGame
local workspace = game:GetService("Workspace")

-- Move the object to the player's position
Adv_Fish.CanCollide = false
Adv_Fish.Position = chr.HumanoidRootPart.Position
wait(0.1)
-- Make sure the object's position updates
Adv_Fish.Position = FirstPosition

local Cast = Vector3.new(1388, 61, -4473)
local AntiStaff = Vector3.new(1378, 50, -4473)

local newBlock = Instance.new("Part")
newBlock.Size = Vector3.new(10, 1, 10)  -- Adjust the size as needed
newBlock.Position = AntiStaff
newBlock.Anchored = true
newBlock.CanCollide = true
newBlock.Parent = game.Workspace

AdvFsh = workspace:WaitForChild("__THINGS"):WaitForChild("__INSTANCE_CONTAINER"):WaitForChild("Active"):WaitForChild("AdvancedFishing")

if AdvFsh == nil then
    wait(1)
    AdvFsh = workspace:WaitForChild("__THINGS"):WaitForChild("__INSTANCE_CONTAINER"):WaitForChild("Active"):WaitForChild("AdvancedFishing")
end

local function fishingRoutine()
    while true do
        wait()
        if UI.Enabled then
            -- If the fishing UI is enabled, reel the line
            local args = {
                [1] = "AdvancedFishing",
                [2] = "RequestReel"
            }
                
            game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
            
            args[2] = "Clicked"
            game:GetService("ReplicatedStorage").Network.Instancing_InvokeCustomFromClient:InvokeServer(unpack(args))
        end
        if not UI.Enabled then
            print("Cast")
            local args = {
                [1] = "AdvancedFishing", 
                [2] = "RequestCast",
                [3] = Cast
            }
        
            game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
        end
    end
end

local soundRemoved = true

local function onChildRemoved(child)
    if child.Name == "Sound" then
        if soundRemoved then
            print("Real")
            local args = {
                [1] = "AdvancedFishing",
                [2] = "RequestReel"
            }
                    
            game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))

            fishingRoutine()
        end
    end
end

chr:WaitForChild("Model").Rod.ChildRemoved:Connect(onChildRemoved)

if chr:WaitForChild("Model"):FindFirstChild("Rod") then
    if not chr.Model.Rod:FindFirstChild("FishingLine") then
            local args = {
                [1] = "AdvancedFishing", 
                [2] = "RequestCast",
                [3] = Cast
            }
        
            game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
    chr:SetPrimaryPartCFrame(CFrame.new(newBlock.Position + Vector3.new(0, chr.Humanoid.HipHeight, 0)))
    end
end

AdvFsh.Map:Destroy()
AdvFsh.Debris:Destroy()
AdvFsh.Water:Destroy()
AdvFsh.Model:Destroy()

chr:SetPrimaryPartCFrame(CFrame.new(newBlock.Position + Vector3.new(0, chr.Humanoid.HipHeight, 0)))
game.Workspace.CurrentCamera.CFrame = CFrame.new(newBlock.Position + Vector3.new(0, 10, 0), newBlock.Position)

fishingRoutine()
